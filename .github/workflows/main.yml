name: Build and Upload to Release

on:
  workflow_dispatch:
    inputs:
      pg_version:
        description: 'PostgreSQL 版本 (例如: 16.9)'
        required: true
        default: '16.10'
        type: string
      os_identifier:
        description: '操作系统标识 (例如: RockyLinux8, Ubuntu22.04)'
        required: true
        default: 'RockyLinux8'
        type: string
      arch:
        description: '目标架构'
        required: true
        default: 'amd64'
        type: choice
        options:
          - amd64
          - arm64
      pgbackrest_version:
        description: 'pgBackRest 版本 (例如: 2.55.1)'
        required: true
        default: '2.55.1'
        type: string
      repmgr_version:
        description: 'repmgr 版本 (例如: v5.4.1)'
        required: true
        default: 'v5.4.1'
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许 action 创建和更新 release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Prepare build variables
        id: prep
        run: |
          PG_VERSION="${{ github.event.inputs.pg_version }}"
          OS_ID="${{ github.event.inputs.os_identifier }}"
          ARCH="${{ github.event.inputs.arch }}"
          
          # 从 '16.9' 生成 '16'
          PG_MAJOR=$(echo $PG_VERSION | cut -d. -f1)
          
          # 构造 Dockerfile 的上下文路径
          # 结果示例: 16/rockylinux8
          CONTEXT_PATH="$PG_MAJOR/$OS_ID"
          echo "context_path=${CONTEXT_PATH}" >> $GITHUB_OUTPUT
          
          # 规范化架构名称用于文件名 (例如 arm64 -> aarch64, amd64 -> x64)
          ARCH_FOR_FILENAME=$ARCH
          if [ "$ARCH" == "arm64" ]; then
            ARCH_FOR_FILENAME="aarch64"
          elif [ "$ARCH" == "amd64" ]; then
            ARCH_FOR_FILENAME="x64"
          fi
          
          # 构造最终的归档文件名
          # 结果示例: postgresql-16.9-x64-RockyLinux8.tar.gz
          ARCHIVE_NAME="postgresql-${PG_VERSION}-${ARCH_FOR_FILENAME}-${OS_ID}.tar.gz"
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          
          # 构造 pg_rman 的分支名
          PGRMAN_BRANCH="REL_${PG_MAJOR}_STABLE"
          echo "pgrman_branch=${PGRMAN_BRANCH}" >> $GITHUB_OUTPUT

          # 构造 Docker build platform 参数
          PLATFORM="linux/${ARCH}"
          echo "platform=${PLATFORM}" >> $GITHUB_OUTPUT

          echo "Context Path: ${CONTEXT_PATH}"
          echo "Platform: ${PLATFORM}"
          echo "Archive Name: ${ARCHIVE_NAME}"
          echo "pg_rman Branch: ${PGRMAN_BRANCH}"

      - name: Manage Release Notes and Determine Latest
        id: release_manager
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = `v${{ github.event.inputs.pg_version }}`;
            const os = "${{ github.event.inputs.os_identifier }}";
            const arch = "${{ github.event.inputs.arch }}";

            const lineIdentifier = `* **${os} (${arch}):**`;
            const build_details = `pgBackRest-${{ github.event.inputs.pgbackrest_version }}, repmgr-${{ github.event.inputs.repmgr_version }}, pg_rman-${{ steps.prep.outputs.pgrman_branch }}`;
            const newLine = `${lineIdentifier} ${build_details}`;

            let currentBody = "";
            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              currentBody = release.body || "";
              console.log(`Found existing release for tag ${tag}.`);
            } catch (error) {
              if (error.status !== 404) {
                throw error; // Rethrow unexpected errors
              }
              console.log(`No release found for tag ${tag}. A new one will be created.`);
            }

            // 按行处理 Release Notes
            const header = "## Component Versions";
            let lines = currentBody.split('\n').filter(line => line.trim() !== '');
            const existingLineIndex = lines.findIndex(line => line.trim().startsWith(lineIdentifier));

            if (existingLineIndex !== -1) {
              console.log("Found existing entry for this OS/Arch. Replacing it.");
              lines[existingLineIndex] = newLine;
            } else {
              console.log("No entry for this OS/Arch. Appending.");
              // 如果标题行不存在，则添加它
              if (!lines.some(l => l.trim() === header)) {
                lines.unshift(header);
              }
              lines.push(newLine);
            }

            const newBody = lines.join('\n');
            core.setOutput('body', newBody);

            const newVersion = '${{ github.event.inputs.pg_version }}';
            let makeLatest = 'false'; // 默认不是 latest

            try {
              const { data: latestRelease } = await github.rest.repos.getLatestRelease({ owner, repo });
              const currentLatestVersion = latestRelease.tag_name.replace(/^v/, '');
              
              makeLatest = 'false'; // 先假设不是 latest
              
              const newParts = newVersion.split('.').map(Number);
              const latestParts = currentLatestVersion.split('.').map(Number);
              const len = Math.max(newParts.length, latestParts.length);

              for (let i = 0; i < len; i++) {
                const newPart = newParts[i] || 0;
                const latestPart = latestParts[i] || 0;
                if (newPart > latestPart) {
                  makeLatest = 'true';
                  break;
                }
                if (newPart < latestPart) {
                  makeLatest = 'false';
                  break;
                }
              }
            } catch (error) {
               if (error.status === 404) {
                 console.log('No latest release found. This build will be marked as latest.');
                 makeLatest = 'true';
               } else {
                 throw error;
               }
            }
            console.log(`New version: ${newVersion}, Current latest will be updated: ${makeLatest}`);
            core.setOutput('make_latest', makeLatest);

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and extract artifact
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.prep.outputs.context_path }}
          platforms: ${{ steps.prep.outputs.platform }}
          push: false
          build-args: |
            PG_VERSION=${{ github.event.inputs.pg_version }}
            PGBACKREST_VERSION=${{ github.event.inputs.pgbackrest_version }}
            PGRMAN_BRANCH=${{ steps.prep.outputs.pgrman_branch }}
            ARCHIVE_NAME=${{ steps.prep.outputs.archive_name }}
            REPMGR_VERSION=${{ github.event.inputs.repmgr_version }}
          outputs: type=local,dest=./output

      - name: Upload Artifact to Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ./output/${{ steps.prep.outputs.archive_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ github.event.inputs.pg_version }}
          name: PostgreSQL ${{ github.event.inputs.pg_version }}
          body: ${{ steps.release_manager.outputs.body }}
          allowUpdates: true
          makeLatest: ${{ steps.release_manager.outputs.make_latest }}